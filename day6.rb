# Рефлексивне програмування
=begin
Рефлексивне програмування - фктивне середовище може опитувати структуру об'єктів і розширювати або модифікувати їх під час виконання.
=end

# defined
=begin
Використовується для визначення використання модифікатора з даним ім'ям.
=end

if defined? some_var
  puts "some_var = #{some_var}"
else
  puts "Змінна some_var невідома"
end

# respond_to
=begin
Визначає чи може об'єкт відповідати на виклик даного методу (перевіряє чи визначений даний метод для даного об'єкта).
=end

#type
=begin
Метод для визначення типу або класу об'єкта.
=end

# is_a || kind_of
=begin
Повідомляє чи належить об'єкт деякому класу (або суперкласу).
=end

puts "acb".class
puts 345.class

rover = Dog.new
puts rover.class

if rover.is_a? Dog
  puts "Звичайно"
end

if rover.kind_of? Dog
  puts "Це все ще собака"
end

if rover.is_a? Animal
  puts "Він ще й тварина"
end

# methods of class Object
=begin
Призначений для отримання списку методів для даного об'єкту.
Аналогічні варіанти private_instance_methods, public_instance_methods.
=end

# constants of class Module
=begin
Призначений для отримання списку всіх констант визначених в модулі.
=end

# ancestors of class Module
=begin
Повертає список всіх модулів, які включені в даний модуль.
Також в даний список входить і даний модуль а також батьківські класи і батьківські модулі.
=end

# superclass of class BasicObject
=begin
Повертає суперклас об`єкта або nil.
Не має суперкласу лише BasicObject тому лише для нього буде повернуто nil.
=end

# модуль ObjectSpace
=begin
Застосовується для отримання доступу добудь-якого "живого" об'єкту.
=end

# _idtoref
=begin
Метод, що перетворює ідентифікатор об'єкту в посилання на нього, операція протилажна методу object_id
=end

# each_object
=begin
Модуль ObjectSpace має ітератор each_object ітерує всі існуючі в даний момент об'єкти, включаючи ті, про які не можливо дізнатися.
=end

# Відсутні методи
=begin
При виклику my_object.my_method, Кгин шукай іменований метод в такому порядку:
1. Синглетні методи, визначені для об'єкту my_object
2. Методи, визначені в класі об'єкту my_object
3. Методи визначені в пращурахкласа об'єкту my_object
Якщо метод не знайдено то Ruby шукає метод з ім'ям method_missing. Якщо він визначений то йому передається ім'я відсутнього методу і всі передані йому параметри.
Даний механізм допомагає в динамічній обробці невідомих повідомлень, надісланих під час виконання.
=end